<?xml version="1.0" encoding="UTF-8" ?>
<project name="test_schema" id="Project_35d47c4" template="Default" database="PostgreSQL" >
	<schema name="public" schemaname="public" >
		<table name="example_a" >
			<comment><![CDATA[If generated by DBSchema, then SQL file needs to be fixed up. The '[]' needs to be part of the datatype (no spaces)]]></comment>
			<column name="column_a" type="varchar" jt="12" mandatory="y" />
			<column name="column_b" type="varchar" jt="12" mandatory="y" />
			<column name="column_c" type="integer" jt="4" />
			<column name="column_d" type="integer[]" jt="2003" />
			<column name="column_e" type="varchar" jt="12" >
				<type_extra>[]</type_extra>
			</column>
			<column name="column_f" type="text[]" jt="2003" />
			<column name="column_g" type="bool[]" jt="2003" />
			<column name="column_h" type="json[]" jt="2003" />
			<index name="pk_example_a" unique="PRIMARY_KEY" >
				<column name="column_a" />
				<column name="column_b" />
			</index>
		</table>
		<table name="example_b" >
			<column name="column_1" type="integer" jt="4" mandatory="y" />
			<column name="column_a" type="varchar" jt="12" mandatory="y" />
			<column name="column_b" type="varchar" jt="12" mandatory="y" />
			<column name="test_id" type="integer" jt="4" />
			<column name="p_bar" type="varchar" jt="12" />
			<column name="t_bar" type="varchar" jt="12" />
			<index name="pk_example_b_column_1" unique="PRIMARY_KEY" >
				<column name="column_1" />
			</index>
			<index name="idx_example_b_column_a" unique="UNIQUE" >
				<column name="column_a" />
			</index>
			<fk name="fk_example_b_example_a" to_schema="public" to_table="example_a" >
				<fk_column name="column_a" pk="column_a" />
				<fk_column name="column_b" pk="column_b" />
			</fk>
			<fk name="fk_example_b_test_table_pkey" to_schema="test_schema" to_table="test_table_pkey" >
				<fk_column name="test_id" pk="id" />
			</fk>
			<fk name="fk_example_b_pfoo" to_schema="public" to_table="foo" >
				<fk_column name="p_bar" pk="bar" />
			</fk>
			<fk name="fk_example_b_tfoo" to_schema="test_schema" to_table="foo" >
				<fk_column name="t_bar" pk="bar" />
			</fk>
		</table>
		<table name="example_c" >
			<column name="column_aa" type="integer" jt="4" mandatory="y" autoincrement="y" />
			<column name="column_a" type="varchar" jt="12" mandatory="y" >
				<comment><![CDATA[This shows a weird corner case where a column that is part of a composite foreign key is referencing another table as a single column]]></comment>
			</column>
			<index name="pk_example_c_column_aa" unique="PRIMARY_KEY" >
				<column name="column_aa" />
			</index>
			<fk name="fk_example_b_example_c" to_schema="public" to_table="example_b" >
				<fk_column name="column_a" pk="column_a" />
				<comment><![CDATA[This is an example of a foreign relationship that is defined on a column that is not identified by a key. While you can put a unique constraint on the referenced column, this will never formalize in a constraint where you know the referenced table in postgres.]]></comment>
			</fk>
		</table>
		<table name="excluded" >
			<column name="column1" type="integer" jt="4" mandatory="y" />
			<column name="column2" type="integer" jt="4" mandatory="y" />
			<column name="column3" type="varchar" jt="12" />
			<index name="pk_public_excluded" unique="PRIMARY_KEY" >
				<column name="column1" />
				<column name="column2" />
			</index>
		</table>
		<table name="foo" >
			<column name="bar" type="varchar" jt="12" mandatory="y" />
			<column name="baz" type="varchar" jt="12" />
			<index name="pk_test_schema_foo_bar" unique="PRIMARY_KEY" >
				<column name="bar" />
			</index>
		</table>
		<table name="part" >
			<column name="part_id" type="serial" jt="1111" mandatory="y" autoincrement="y" />
			<column name="part_name" type="varchar" length="100" jt="12" />
			<index name="pk_public_parts_part_id" unique="PRIMARY_KEY" >
				<column name="part_id" />
			</index>
		</table>
		<table name="part_part" >
			<comment><![CDATA[This table represents a many to many nested / recursive relationship. This should result in a repeated message.]]></comment>
			<column name="part_id" type="int" jt="4" mandatory="y" />
			<column name="child_part_id" type="int" jt="4" mandatory="y" />
			<index name="pk_public_part_part" unique="PRIMARY_KEY" >
				<column name="part_id" />
				<column name="child_part_id" />
			</index>
			<fk name="fk_public_part_part_public_part" to_schema="public" to_table="part" >
				<fk_column name="part_id" pk="part_id" />
			</fk>
			<fk name="fk_public_part_part_public_part_0" to_schema="public" to_table="part" >
				<fk_column name="child_part_id" pk="part_id" />
			</fk>
		</table>
		<table name="product" >
			<comment><![CDATA[This table represents a top level entity with an identifying primary key.

#service:product]]></comment>
			<column name="product_id" type="serial" jt="1111" mandatory="y" autoincrement="y" />
			<column name="product_name" type="varchar" length="100" jt="12" />
			<column name="sku" type="varchar" length="100" jt="12" />
			<column name="produced" type="timestamptz" jt="93" >
				<defo>current_timestamp</defo>
			</column>
			<column name="id" type="int" jt="4" />
			<index name="pk_public_table_id" unique="PRIMARY_KEY" >
				<column name="product_id" />
			</index>
			<index name="idx_public_product" unique="NORMAL" >
				<column name="id" />
			</index>
			<fk name="fk_public_product_test_table_pkey" to_schema="test_schema" to_table="test_table_pkey" >
				<fk_column name="id" pk="id" />
			</fk>
		</table>
		<table name="product_parts" >
			<comment><![CDATA[This table represents a many to many relationship between two different entities.

#service: product]]></comment>
			<column name="product_id" type="int" jt="4" mandatory="y" />
			<column name="part_id" type="int" jt="4" mandatory="y" />
			<index name="pk_public_product_parts" unique="PRIMARY_KEY" >
				<column name="product_id" />
				<column name="part_id" />
			</index>
			<fk name="fk_parts_product" to_schema="public" to_table="product" >
				<fk_column name="product_id" pk="product_id" />
			</fk>
			<fk name="fk_product_parts_part" to_schema="public" to_table="part" >
				<fk_column name="part_id" pk="part_id" />
			</fk>
		</table>
	</schema>
	<schema name="test_schema" schemaname="test_schema" >
		<table name="address" >
			<column name="address_id" type="serial" jt="1111" mandatory="y" autoincrement="y" />
			<column name="address1" type="varchar" length="100" jt="12" />
			<column name="address2" type="varchar" length="100" jt="12" />
			<column name="city" type="varchar" jt="12" />
			<column name="state" type="varchar" jt="12" />
			<column name="country" type="char" length="2" jt="1" />
			<column name="postcode" type="varchar" jt="12" />
			<index name="pk_address_address_d" unique="PRIMARY_KEY" >
				<column name="address_id" />
			</index>
		</table>
		<table name="foo" >
			<column name="bar" type="varchar" jt="12" mandatory="y" />
			<column name="baz" type="varchar" jt="12" />
			<index name="pk_test_schema_foo_bar" unique="PRIMARY_KEY" >
				<column name="bar" />
			</index>
		</table>
		<table name="test_table_no_pkey" >
			<comment><![CDATA[This table will enumerate every postgres data type as of 9.5]]></comment>
			<column name="bigint_col" type="bigint" jt="-5" />
			<column name="bigint_array_col" type="bigint[]" jt="2003" />
			<column name="big_serial_col" type="bigserial" jt="-5" />
			<column name="bool_col" type="bool" jt="-7" />
			<column name="bytea_col" type="bytea" jt="-2" />
			<column name="char_col" type="char" length="100" jt="1" />
			<column name="cidr_col" type="cidr" jt="1111" />
			<column name="date_col" type="date" jt="91" >
				<defo>current_date</defo>
			</column>
			<column name="float8_col" type="float8" jt="6" />
			<column name="inet_col" type="inet" jt="1111" />
			<column name="integer_col" type="integer" jt="4" />
			<column name="integer_array_col" type="integer[]" jt="2003" />
			<column name="json_col" type="json" jt="2000" />
			<column name="numeric_precision_col" type="numeric" length="9" decimal="4" jt="2" />
			<column name="numeric_col" type="numeric" jt="2" />
			<column name="real_col" type="real" jt="7" />
			<column name="serial_col" type="serial" jt="1111" />
			<column name="smallint_col" type="smallint" jt="5" />
			<column name="smallint_array_col" type="smallint[]" jt="2003" />
			<column name="smallserial_col" type="smallserial" jt="5" />
			<column name="text_col" type="text" jt="12" />
			<column name="time_col" type="time" jt="92" >
				<defo>current_time</defo>
			</column>
			<column name="timestamp_col" type="timestamp" jt="93" >
				<defo>current_timestamp</defo>
			</column>
			<column name="timestampz_col" type="timestamptz" jt="93" >
				<defo>current_timestamp</defo>
			</column>
			<column name="uuid_col" type="uuid" jt="1111" />
			<column name="varchar_col" type="varchar" jt="12" />
			<column name="varchar_length_col" type="varchar" length="256" jt="12" />
			<column name="xml_col" type="xml" jt="2009" />
			<column name="int_col" type="int" jt="4" />
			<column name="decimal_col" type="decimal" jt="3" />
		</table>
		<table name="test_table_pkey" >
			<comment><![CDATA[This table will enumerate every postgres data type as of 9.5 with a primary key]]></comment>
			<column name="bigint_col" type="bigint" jt="-5" />
			<column name="bigint_array_col" type="bigint[]" jt="2003" />
			<column name="big_serial_col" type="bigserial" jt="-5" />
			<column name="bool_col" type="bool" jt="-7" />
			<column name="bytea_col" type="bytea" jt="-2" />
			<column name="char_col" type="char" length="100" jt="1" />
			<column name="cidr_col" type="cidr" jt="1111" />
			<column name="date_col" type="date" jt="91" >
				<defo>current_date</defo>
			</column>
			<column name="float8_col" type="float8" jt="6" />
			<column name="inet_col" type="inet" jt="1111" />
			<column name="integer_col" type="integer" jt="4" />
			<column name="integer_array_col" type="integer[]" jt="2003" />
			<column name="json_col" type="json" jt="2000" />
			<column name="numeric_precision_col" type="numeric" length="9" decimal="4" jt="2" />
			<column name="numeric_col" type="numeric" jt="2" />
			<column name="real_col" type="real" jt="7" />
			<column name="serial_col" type="serial" jt="1111" />
			<column name="smallint_col" type="smallint" jt="5" />
			<column name="smallint_array_col" type="smallint[]" jt="2003" />
			<column name="smallserial_col" type="smallserial" jt="5" />
			<column name="text_col" type="text" jt="12" />
			<column name="time_col" type="time" jt="92" >
				<defo>current_time</defo>
			</column>
			<column name="timestamp_col" type="timestamp" jt="93" >
				<defo>current_timestamp</defo>
			</column>
			<column name="timestampz_col" type="timestamptz" jt="93" >
				<defo>current_timestamp</defo>
			</column>
			<column name="uuid_col" type="uuid" jt="1111" />
			<column name="varchar_col" type="varchar" jt="12" />
			<column name="varchar_length_col" type="varchar" length="256" jt="12" />
			<column name="xml_col" type="xml" jt="2009" />
			<column name="int_col" type="int" jt="4" />
			<column name="decimal_col" type="decimal" jt="3" />
			<column name="id" type="serial" jt="1111" mandatory="y" autoincrement="y" />
			<index name="pk_test_table_no_pkey_0_id" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="user" >
			<comment><![CDATA[This table will help test secondary lookup via email.

#service: user]]></comment>
			<column name="user_id" type="serial" jt="1111" mandatory="y" autoincrement="y" />
			<column name="first_name" type="varchar" length="100" jt="12" />
			<column name="last_name" type="varchar" length="100" jt="12" />
			<column name="email" type="varchar" jt="12" mandatory="y" />
			<column name="geog" type="geography(point)" jt="1111" />
			<column name="pword_hash" type="bytea" jt="-2" />
			<column name="user_token" type="uuid" jt="1111" mandatory="y" >
				<defo>uuid_generate_v1mc()</defo>
			</column>
			<column name="enabled" type="bool" jt="-7" mandatory="y" >
				<defo>true</defo>
			</column>
			<column name="aka_id" type="int" jt="4" />
			<index name="unq_user_email" unique="UNIQUE" >
				<column name="email" />
			</index>
			<index name="pk_user" unique="PRIMARY_KEY" >
				<column name="user_id" />
			</index>
			<fk name="fk_user_user" to_schema="test_schema" to_table="user" >
				<fk_column name="aka_id" pk="user_id" />
			</fk>
		</table>
		<table name="user_product_part" >
			<comment><![CDATA[#service: user]]></comment>
			<column name="user_id" type="integer" jt="4" mandatory="y" />
			<column name="product_id" type="integer" jt="4" mandatory="y" />
			<column name="part_id" type="integer" jt="4" mandatory="y" />
			<column name="inserted_on" type="bigint" jt="-5" mandatory="y" >
				<comment><![CDATA[The UNIX epoch]]></comment>
			</column>
			<index name="pk_user_product_part" unique="PRIMARY_KEY" >
				<column name="user_id" />
				<column name="product_id" />
				<column name="part_id" />
			</index>
			<index name="unq_user_product_part_product_id" unique="UNIQUE" >
				<column name="product_id" />
			</index>
			<index name="unq_user_product_part_user_id" unique="UNIQUE" >
				<column name="user_id" />
			</index>
			<fk name="fk_user_product_part_product" to_schema="public" to_table="product" >
				<fk_column name="product_id" pk="product_id" />
			</fk>
			<fk name="fk_user_product_part_user" to_schema="test_schema" to_table="user" >
				<fk_column name="user_id" pk="user_id" />
			</fk>
			<fk name="fk_user_product_part_part" to_schema="public" to_table="part" >
				<fk_column name="part_id" pk="part_id" />
			</fk>
		</table>
	</schema>
	<layout name="Default Layout" id="Layout_5f168fb" joined_routing="y" show_column_type="y" show_relation="columns" >
		<entity schema="test_schema" name="test_table_no_pkey" color="C1D8EE" x="48" y="192" />
		<entity schema="public" name="excluded" color="C1D8EE" x="992" y="400" />
		<entity schema="test_schema" name="foo" color="3986C1" x="992" y="656" />
		<entity schema="public" name="foo" color="C1D8EE" x="992" y="560" />
		<entity schema="public" name="example_c" color="C1D8EE" x="1424" y="688" />
		<entity schema="public" name="example_b" color="C1D8EE" x="1232" y="688" />
		<entity schema="public" name="part_part" color="C1D8EE" x="1248" y="304" />
		<entity schema="public" name="part" color="C1D8EE" x="1232" y="192" />
		<entity schema="test_schema" name="test_table_pkey" color="3986C1" x="368" y="192" />
		<entity schema="test_schema" name="address" color="C1D8EE" x="704" y="496" />
		<entity schema="test_schema" name="user" color="C1D8EE" x="672" y="48" />
		<entity schema="test_schema" name="user_product_part" color="C1D8EE" x="976" y="80" />
		<entity schema="public" name="product" color="C1D8EE" x="656" y="288" />
		<entity schema="public" name="product_parts" color="C1D8EE" x="992" y="272" />
		<entity schema="public" name="example_a" color="C1D8EE" x="1216" y="480" />
		<callout x="48" y="80" pointer="Round" >
			<comment><![CDATA[This schema is designed to test the mapping from a SQL Schema 
to Go S/CRUD generated code as well as supporting protobuffers.

Currently only Postgres is supported]]></comment>
		</callout>
	</layout>
</project>